hoje <- format(today()-1, "%d-%m-%Y")
hoje
hoje2 <- today()-1
leitos <- read_delim(paste0(path, hoje, "/leitos.csv"),
";", escape_double = FALSE, trim_ws = TRUE)
head(leitos)
setwd("/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos_2020-11-05")
names(leitos)[1] <- "date"
leitos <- clean_names(leitos)
names(leitos)
class(leitos$date)
leitos %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = leitos_totais),
stat = "identity")
##--Gráfico Total--##
leitos2 <- leitos %>%
select(date, leitos_enfermaria:leitos_totais) %>%
gather(key = type, value = count, -date) %>%
mutate(type2 = if_else(type == "leitos_enfermaria", "Enfermaria",
if_else(type == "leitos_uti", "UTI", "Total")))
leitos2$type2 <- factor(leitos2$type2, levels = c("Enfermaria", "UTI", "Total"))
##Lado a lado##
leitos2 %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = count, fill = type2),
stat = "identity",
position = "dodge") +
theme_bw() +
scale_fill_manual(values = c("blue", "red", "orange")) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.key.size = unit(0.5, 'cm'),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.text.x = element_text(size = 8)) +
ylab("Ocupação de leitos") +
xlab(" ") +
theme(axis.text.x = element_text(angle = 45)) +
labs(title = "COVID-19 em PE",
caption = paste("IRRD/PE. Fonte: Seplag PE.\n Dados atualizados em ",
format(dmy(hoje), "%d/%m/%Y")))
##--
leitos2 %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = count, fill = type2),
stat = "identity",
position = "fill")
leitos2 %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = count, fill = type2),
stat = "identity") +
scale_fill_viridis_d() +
theme_light()
leitos2 %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = count, fill = type2),
stat = "identity") +
scale_fill_viridis_d() +
theme_light()
##--
leitos_plot <- leitos %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = leitos_totais, fill = "Total"),
stat = "identity",
alpha = 0.8) +
scale_fill_manual(values = "orange") +
geom_line(aes(y = leitos_enfermaria, color = "Enfermaria"),
size = 1) +
geom_point(aes(y = leitos_uti),
color = "red") +
geom_point(aes(y = leitos_enfermaria),
color = "darkblue") +
geom_line(aes(y = leitos_uti, color = "UTI")) +
scale_color_manual(values = c("darkblue", "red")) +
theme_light() +
xlab(" ") +
ylab("Ocupação de leitos") +
theme(axis.text.x = element_text(angle = 45)) +
labs(title = "COVID-19 em PE",
caption = paste("IRRD/PE. Fonte: Seplag PE.\n Dados atualizados em ",
format(dmy(hoje), "%d/%m/%Y"))) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.key.size = unit(0.5, 'cm'),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.text.x = element_text(size = 8)) +
scale_x_date(date_breaks = "7 days", date_labels = "%b %d",
limits = as.Date(c(leitos$date[1], hoje)))
leitos_plot
##---------------------------##
leitos_plot2 <- leitos %>%
ggplot(aes(x = date)) +
geom_bar(aes(y = leitos_totais, fill = "Total"),
stat = "identity",
alpha = 0.8) +
scale_fill_manual(values = "orange") +
geom_line(aes(y = leitos_enfermaria, color = "Enfermaria"),
size = 1) +
geom_point(aes(y = leitos_uti),
color = "red") +
geom_point(aes(y = leitos_enfermaria),
color = "darkblue") +
geom_line(aes(y = leitos_uti, color = "UTI")) +
scale_color_manual(values = c("darkblue", "red")) +
theme_light() +
xlab(" ") +
ylab("Ocupação de leitos") +
theme(axis.text.x = element_text(angle = 45)) +
labs(title = "COVID-19 em PE",
caption = paste("IRRD/PE. Fonte: Seplag PE.\n Dados atualizados em ",
format(dmy(hoje), "%d/%m/%Y"))) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.key.size = unit(0.5, 'cm'),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.text.x = element_text(size = 8)) +
scale_x_date(date_breaks = "7 days", date_labels = "%b %d",
limits = as.Date(c(leitos$date[1], hoje)))
##--Salvando em jpg e html--##
#Criando pasta
dir.create("graficos_leito")
path_leito <- paste0(getwd(), "/","graficos_leito", "/")
##
jpeg(paste(path_leito, "leitos_plot.jpg", sep = ""),
width = 5, height = 5, units = 'in', res = 300)
leitos_plot
dev.off()
##--html--##
plot_leitos <- ggplotly(leitos_plot2, width = 3, height = 6)
plot_leitos
htmlwidgets::saveWidget(plot_leitos,
paste(path_leito, "leitos_ocupacao_plot.html", sep = ""))
##--Taxa de ocupação de leitos
ocupacao_uti <- ggplot(data = leitos, aes(x = date, y = 100*taxa_de_ocupacao_uti)) +
geom_point(color = "blue") +
geom_line(color = "blue") +
theme_light() +
ylab("Taxa de ocupação de UTI (%)") +
xlab("") +
theme(axis.text.x = element_text(angle = 45)) +
labs(title = "COVID-19 em PE",
caption = paste("IRRD/PE. Fonte: Seplag PE.\n Dados atualizados em ",
format(dmy(hoje), "%d/%m/%Y"))) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.key.size = unit(0.5, 'cm'),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.text.x = element_text(size = 8)) +
scale_x_date(date_breaks = "7 days", date_labels = "%b %d",
limits = as.Date(c(leitos$date[1], hoje)))
ocupacao_uti
##--Salvando em jpg e html--##
jpeg(paste(path_leito, "ocupacao_uti.jpg", sep = ""),
width = 5, height = 5, units = 'in', res = 300)
ocupacao_uti
dev.off()
##--html--##
ocupacao_utihtml <- ggplotly(ocupacao_uti, width = 3, height = 6)
ocupacao_utihtml
htmlwidgets::saveWidget(ocupacao_utihtml,
paste(path_leito, "ocupacao_uti.html", sep = ""))
library(dplyr)
library(ggplot2)
library(readr)
library(lubridate)
library(readr)
library(ggpubr)
library(pracma)
library(plotly)
##--Selecionando o português com idioma nos gráficos
Sys.setlocale("LC_TIME", "pt_PT.UTF-8")
hoje <- format(as.Date(today()-1), "%d-%m-%Y")
hoje2 <- today()-1
path <- paste0("/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos_",
hoje2)
setwd(path)
#Criando pasta
dir.create("graficos_genomika")
path_genomika <- paste0("/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos_",
hoje2,"/graficos_genomika/")
###############################################
#=================================================#
### Genomika
# Title     : Genomika
# Objective : Get API data
# Created by: ASRF
# Created on: 17/04/2020
# req <- httr::GET(
#   url = "http://resultados.genomika.com.br/api/v2/covid-results/",
#   add_headers("Content-Type" = "application/json",
#               "Authorization" = "Token f2f2d2e0024427241194f51481a1927a9b604ea3")
# )
#
# genomika_df <- jsonlite::fromJSON(rawToChar(req$content))
## Base de dados
library(readr)
genomika <- read_delim(paste0("~/Google Drive/Coronavirus/IRRD/planilhas de pe/novembro/", hoje, "/genomika.csv"),
";", escape_double = FALSE, trim_ws = TRUE)
# Sumário
genomika_df <- genomika
names(genomika_df)
head(genomika_df$resultado)
resultado <- as.data.frame(table(genomika_df$resultado))
resultado <- resultado %>% mutate(prop = round(100*Freq/sum(Freq), 1))
resultado
names(resultado)[1] <- "Resultado"
resultado
inconclusivo <- paste0("Inconclusivo: ", resultado$Freq[1], "(", resultado$prop[1], "%", ")")
inconclusivo
indefinido <- paste0("Indefinido: ", resultado$Freq[2], "(", resultado$prop[2], "%", ")")
indefinido
pendente <- paste0("Pendente: ", resultado$Freq[4], "(", resultado$prop[4], "%", ")")
pendente
##--Só positivos e negativos--##
resultadoi <- resultado[resultado$Resultado == "Positivo" |
resultado$Resultado == "Negativo",]
resultadoi
library(ggplot2)
# Gráfico para resultado
# Gráfico de pizza
resultado_bp <- ggplot(resultadoi, aes(x = "", y = Freq, fill = Resultado)) +
geom_bar(width = 1, stat = "identity", color = "white")
# Pie chart
pie_resultado <- resultado_bp + coord_polar("y", start=0)
# Customize
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie_resultado= pie_resultado +  blank_theme +
theme(axis.text.x=element_blank())
# Compute the position of labels
data = resultadoi
head(data)
data <- data %>%
arrange(desc(Resultado)) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
head(data)
# Retirar o pendente se a porcentagem for próxima de 0
#data2 = data[-2,] # Sem o Pendente
data2 = data
# Basic piechart
resultado_pie <- ggplot(data2, aes(x="", y=prop, fill=Resultado)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="bottom") +
geom_text(aes(y = ypos, label = paste(Freq, "(", prop, "%", ")", sep = "")),
color = "black", size=3.5) +
scale_fill_brewer(palette="Set1")
resultado_pie = resultado_pie +
ggtitle("Resultados dos testes para COVID-19 em PE\nGenomika/LIKA-UFPE") +
labs(caption = paste("IRRD/PE. Dados atualizados em", format(dmy(hoje), "%d/%m/%Y"),
"\n", inconclusivo,
"\n", indefinido,
"\n", pendente)) +
theme(legend.title = element_blank())
resultado_pie
# Salvando em jpg
jpeg(paste(path_genomika, "genomika_dados.jpg", sep = ""),
width = 5, height = 4, units = 'in', res = 300)
resultado_pie
dev.off()
# Número de testes por dia
# Gráfico de barras
# Filtrando Data de atendimento e resultado
library(dplyr)
df_atend_result <- genomika_df %>%
dplyr::select(data_atendimento, resultado)
class(df_atend_result$data_atendimento)
df_atend_result$data_atendimento = as.Date(df_atend_result$data_atendimento)
testes_dia = table(df_atend_result$data_atendimento, df_atend_result$resultado)
testes_dia = as.data.frame(testes_dia)
names(testes_dia) = c("data_atend", "resultado", "freq")
View(testes_dia)
##--Só com os resultados positivos e negativos
testes_diai <- testes_dia %>%
filter(resultado=="Positivo" | resultado == "Negativo")
# Incluindo o total de testes
total = as.data.frame(table(genomika_df$data_atendimento))
names(total) = c("data_atend", "freq")
total$data_atend = as.Date(total$data_atend)
total = total %>% mutate(resultado = "Total")
total = total %>% dplyr::select(data_atend, resultado, freq)
# Juntando tudo
class(testes_dia$data_atend)
testes_dia$data_atend = as.Date(testes_dia$data_atend)
testes_dia2 = rbind(testes_dia, total)
testes_dia2$resultado = as.character(testes_dia2$resultado)
str(testes_dia2)
###
testes_diai$data_atend = as.Date(testes_diai$data_atend)
plot <- ggplot(testes_diai,
aes(x = data_atend, y = freq, fill = resultado)) +
geom_bar(stat = "identity", alpha = 0.9) +
xlab("Data de atendimento") +
ylab("Quantidade de testes diários") +
scale_fill_manual(values = c("black", "blue", "yellow", "red"))+
theme_ipsum() +
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(angle = 45)) +
scale_x_date(date_breaks = "7 days", date_labels = "%b %d",
limits = as.Date(c("2020-03-17", dmy(hoje)))) +
ggtitle("Testes diários para COVID-19 em PE\nGenomika/LIKA-UFPE") +
labs(caption = paste("IRRD/PE. Dados atualizados em", format(as.Date(hoje2), "%d/%m/%Y"))) +
theme(legend.title = element_blank())
plot
#==============================#
# Salvar #
#==============================#
jpeg(paste(path_genomika, "genomika_testes.jpg", sep = ""),
width = 7, height = 6, units = 'in', res = 300)
plot
dev.off()
###################################
library('ggthemes')
library('ggthemr')
ggthemr_reset()
ggthemr("flat")
plot6 <- testes_dia2 %>%
ggplot(aes(x = data_atend, y =  resultado, fill = freq)) +
#geom_raster(color = "black") +
geom_point(size = 7, alpha = 1, shape = 22,
color = "gray") +
scale_fill_viridis_c(direction = -1)+
theme_bw()+
geom_text(aes(x = data_atend, y = resultado, label = freq), color = "black", size = 3)+
labs(x = "Data de atendimento", y = "Resultado", fill = "Quantidade \nde testes",
title = "Quantidade de testes",
subtitle = "Genomika/LIKA-UFPE",
caption = paste("IRRD-PE. Dados atualizados em",
format(as.Date(hoje2), "%d-%m-%Y"))) +
theme(axis.text.x = element_text(angle = 45, size = 8, face = "bold"))+
theme(axis.text = element_text(color = "dimgray", size = 10, face = "bold")) +
scale_x_date(date_labels = "%b %d", date_breaks = "7 days")
plot6
###################################
# Salvando em jpg
#path <- "/Users/edneideramalho/Google Drive/Coronavirus/IRRD/Informes e relatórios/graficos 28-04-2020/"
jpeg(paste(path_genomika, "genomika_testes_dia.jpg", sep = ""),
width = 13, height = 7, units = 'in', res = 300)
plot6
dev.off()
#=====================#
# Histograma de Idade #
#=====================#
class(genomika_df$data_nascimento)
# Código para idade
#idade = lubridate::time_length(difftime(Sys.Date(), data_de_nascimento), "years")
#lubridate::as_date(data_atualizacao)
library(lubridate)
genomika_df = genomika_df %>%
mutate(data_nasc = lubridate::as_date(data_nascimento),
idade = lubridate::time_length(difftime(Sys.Date(), data_nasc), "years"))
indices_excluir <- which(genomika_df$idade < 0)
genomika_df = genomika_df %>%
mutate(sexo2 = if_else(sexo == 0, "Masculino", "Feminino"))
# Outro
library(hrbrthemes)
genomika_df2 = genomika_df[-indices_excluir,]
histogram <- genomika_df2 %>%
ggplot(aes(x = idade, fill = sexo2)) +
geom_histogram(color="#e9ecef", alpha=0.75, position = 'identity') +
scale_fill_manual(values=c("#ffcc00", "#404080")) +
theme_ipsum() +
labs(fill="",
title = "Testes realizados pela \nGenomika/LIKA-UFPE",
subtitle = "",
caption = paste("IRRD. Dados atualizados em",
format(dmy(hoje), "%d/%m/%Y")))+
xlab("Idade") +
ylab("Frequência")
histogram
jpeg(paste(path_genomika, "genomika_testes_histogram.jpg", sep = ""),
width = 8, height = 6, units = 'in', res = 300)
histogram
dev.off()
##=============================================##
##--Gráfico de novos óbitos por data de óbito--##
##============================================##
##--Filtrando os óbitos--##
names(confirmados_geral)
confirmados_geral$evolucao %>% unique()
obitos_geral <- confirmados_geral %>%
filter(evolucao == "ÓBITO")
obitos_geral$data_do_obito %>% class()
dmy(obitos_geral$data_do_obito[1])
obitos_geral$data_do_obito <- dmy(obitos_geral$data_do_obito)
table_obito <- table(obitos_geral$data_do_obito)
head(table_obito)
##--Convertendos em data frame--##
df_obito <- as.data.frame(table_obito)
names(df_obito) <- c("data", "obitos")
head(df_obito)
##--Adicionando média móvel--##
media_movel_obito <- movavg(df_obito$obitos, 7, "s")
df_obito <- df_obito %>%
mutate(media_movel = media_movel_obito)
##-Gráfico--##
plot_obitos_dt_ob <- ggplot(df_obito, aes(x = as.Date(data))) +
geom_bar(aes(y = obitos, fill = "Óbitos"),
stat = "identity", alpha = 0.9) +
scale_fill_manual(values = c("black")) +
geom_line(aes(y = media_movel, color = "Média móvel"),
size = 2) +
scale_color_manual(values = c("orange")) +
theme_ipsum() +
scale_x_date(date_breaks = "10 days", date_labels = "%b %d") +
ylab("Óbitos") +
xlab("Data do óbito") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Óbitos diários por data do óbito \nCOVID-19/Pernambuco",
caption = paste("IRRD-PE. Fonte: SES-PE.\nDados atualizados em:", hoje)) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90),
legend.title = element_blank())
plot_obitos_dt_ob
##=============================================##
##--Gráfico de novos óbitos por data de óbito--##
##============================================##
##--Filtrando os óbitos--##
names(confirmados_geral)
confirmados_geral$evolucao %>% unique()
obitos_geral <- confirmados_geral %>%
filter(evolucao == "ÓBITO")
df_obito <- confirmados_srag %>%
filter(evolucao == "ÓBITO")
dim(df_obito)[1]
# letalidade
paste("letalidade = ", round(100*dim(df_obito)[1]/(dim(confirmados_srag)[1]+dim(confirmados_leves)[1]),2), "%", sep = "")
## Sexo
round(100*table(df_obito$sexo)/sum(table(df_obito$sexo)), 2)
## Sumário da Idade
summary(df_obito$idade)
sd(df_obito$idade, na.rm = TRUE) %>% round(digits = 2)
# Porcentagem de idosos
df_obito = df_obito %>%
mutate(idosos = if_else(idade >= 60, "Idoso", "Não Idoso"))
props = as.data.frame(table(df_obito$idosos)) %>%
mutate(prop = round(100*Freq/sum(Freq), 2))
props
dim(confirmados_leves)
rm(list=ls())
runApp('~/Documents/GitHub/EpiModel_Dashboard_Malawi/version7.R')
setwd("~/Documents/GitHub/EpiModel_Dashboard_Malawi")
as.numeric(difftime(as.Date("2021-03-03"), today(), units = "days"))
as.numeric(difftime(today(), as.Date("2020-04-01"), units = "days"))
223-15
runApp('version7.R')
223-15
as.numeric(difftime(today(), as.Date("2020-04-01"), units = "days")) - 30
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
library(readr)
current_with_date <- read_csv("current_with_date.csv")
View(current_with_date)
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
title <- vector(mode = "character", lemgth = 1)
title <- vector(mode = "character", length = 1)
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
rm(list=ls())
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
runApp('version7.R')
