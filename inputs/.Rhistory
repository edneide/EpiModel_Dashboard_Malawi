Dead = floor(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
list_TAs[[i]] <- ta1_spread
}
result_TAs <- do.call(rbind, list_TAs)
result_TAs
trunc(x)
y = 1.5
trunc(y)
y = 1.98
trunc(y)
##--Begin of loop
##i = 1
for(i in 1:20){
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date == today())
ta_test <- ta_test[,-c(1,2)] %>%
filter(State %in% state_table)
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date)
ta1 <- ta_test2 %>%
group_by(State) %>%
summarize(
new_inf = sum(People)
) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta1,key = State, value = new_inf)
ta1_spread <- ta1_spread %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
list_TAs[[i]] <- ta1_spread
}
result_TAs <- do.call(rbind, list_TAs)
result_TAs
##--Begin of loop
##i = 1
for(i in 1:200){
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date == today())
ta_test <- ta_test[,-c(1,2)] %>%
filter(State %in% state_table)
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date)
ta1 <- ta_test2 %>%
group_by(State) %>%
summarize(
new_inf = sum(People)
) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta1,key = State, value = new_inf)
ta1_spread <- ta1_spread %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
list_TAs[[i]] <- ta1_spread
}
##--Begin of loop
##i = 1
for(i in 1:100){
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date == today())
ta_test <- ta_test[,-c(1,2)] %>%
filter(State %in% state_table)
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date)
ta1 <- ta_test2 %>%
group_by(State) %>%
summarize(
new_inf = sum(People)
) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta1,key = State, value = new_inf)
ta1_spread <- ta1_spread %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
list_TAs[[i]] <- ta1_spread
}
result_TAs <- do.call(rbind, list_TAs)
result_TAs
View(result_TAs)
##--Begin of loop
##i = 1
for(i in 1:length(tas_names)){
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date == today())
ta_test <- ta_test[,-c(1,2)] %>%
filter(State %in% state_table)
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date)
ta1 <- ta_test2 %>%
group_by(State) %>%
summarize(
new_inf = sum(People)
) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta1,key = State, value = new_inf)
ta1_spread <- ta1_spread %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
list_TAs[[i]] <- ta1_spread
}
result_TAs <- do.call(rbind, list_TAs)
result_TAs
View(result_TAs)
##--Begin of loop
i = 1
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date == today())
View(ta_test)
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date == today())
ta_test <- ta_test[,-c(1,2)] %>%
filter(State %in% state_table)
##--Begin of loop
##i = 1
for(i in 1:length(tas_names)){
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date)
ta1 <- ta_test2 %>%
group_by(State) %>%
summarize(
new_inf = sum(People)
) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta1,key = State, value = new_inf)
ta1_spread <- ta1_spread %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
list_TAs[[i]] <- ta1_spread
}
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(State) %>%
summarize(new_inf = sum(People)) %>%
mutate(TA = tas_names[i])
View(ta_test2)
##--Begin of loop
i = 1
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(State) %>%
summarize(new_inf = sum(People)) %>%
mutate(TA = tas_names[i])
View(ta_test2)
ta1_spread <- spread(ta1,key = State, value = new_inf) %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
View(ta1_spread)
i =1
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(State) %>%
summarize(new_inf = sum(People)) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta1,key = State, value = new_inf) %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
View(ta1_spread)
View(ta_test2)
i=1
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(State) %>%
summarize(new_inf = sum(People)) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta_test2, key = State, value = new_inf) %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
View(ta1_spread)
View(ta_test2)
list_TAs[[i]] <- ta1_spread
rm(list=ls())
library(ggplot2)
library(tidyverse)
start_time <- Sys.time()
#setwd("C:/Users/Michael/Git/Malawi-COVID-Epidemiological-Model/inputs")
setwd("/Users/edneideramalho/Google Drive/Coronavirus/Malawi-covid_19/Dados_Att_e_Modelos/Malawi-COVID-Epidemiological-Model/Malawi-COVID-Epidemiological-Model-master/inputs")
AGE_CHILD <- 1
AGE_ADULT <- 2
AGE_ELDER <- 3
ages = c(AGE_CHILD, AGE_ADULT, AGE_ELDER)
age_names = c('Pediatric', 'Adult', 'Elderly')
df_distancing <- read_csv('reductionScenarios/current.csv')
df_masking <- read_csv('masking/masking_compliance.csv')
df_locations <- read_csv('MW COVID Inputs.csv')
df_params <- read_csv('params_inits_template.csv')
df_seed <- read_csv('simulation-seeddates-ta-20200910.csv')
# Setup model parameters
age_infection_rates <- rbind(
c(df_params$ped2ped, df_params$ped2ad, df_params$ped2eld),
c(df_params$ad2ped,  df_params$ad2ad,  df_params$ad2eld),
c(df_params$eld2ped, df_params$eld2ad, df_params$eld2eld)
)
susceptibility <- c(df_params$susceptibility_p, df_params$susceptibility_a, df_params$susceptibility_e)
r0 <- df_params$R0
exposed_time <- 1 / df_params$kappa
infected_time <- 1 / df_params$kappa2
hosp_time <- 1 / df_params$tau
crit_time <- 1 / df_params$tau2
mask_effectiveness <- df_params$efficacy
seed_threshold <- df_params$seed_date_threshold
excluded_locations <- c(20407,10106,20251,20118,20102,20511,21071,30303,21070,10110,10314)
df_locations <- df_locations %>%
filter(!(TA_Code %in% excluded_locations))
df_locations$age_code = 0
df_locations$age_code[df_locations$Age == 'Pediatrics'] <- AGE_CHILD
df_locations$age_code[df_locations$Age == 'Adults'] <- AGE_ADULT
df_locations$age_code[df_locations$Age == 'Elderly'] <- AGE_ELDER
seed_column <- paste('day_n', seed_threshold, sep='')
df_seed_dates <- df_seed[c('adm_id', seed_column)] %>% rename(start_day=seed_column)
df_locations <- left_join(df_locations, df_seed_dates, by=c('TA_Code'='adm_id'))
behaviour_mod <- (1 - df_distancing$reduc) * (1 - df_masking$masking_compliance * mask_effectiveness)
base_infection_rate <- r0 / (exposed_time + infected_time)
dfs_ages <- list(
df_locations[df_locations$age_code == AGE_CHILD,],
df_locations[df_locations$age_code == AGE_ADULT,],
df_locations[df_locations$age_code == AGE_ELDER,]
)
s <- list()
n <- list()
e <- list()
i <- list()
h <- list()
c <- list()
r <- list()
d <- list()
for (age in ages) {
dfs_ages[[age]]$pop_infection_rate <- base_infection_rate * susceptibility[[age]] / dfs_ages[[age]]$Population
dfs_ages[[age]]$empty_state = 0
s[[age]] <- matrix(dfs_ages[[age]]$Population)
n[[age]] <- matrix(dfs_ages[[age]]$empty_state)
e[[age]] <- matrix(dfs_ages[[age]]$empty_state)
i[[age]] <- matrix(dfs_ages[[age]]$empty_state)
h[[age]] <- matrix(dfs_ages[[age]]$empty_state)
c[[age]] <- matrix(dfs_ages[[age]]$empty_state)
r[[age]] <- matrix(dfs_ages[[age]]$empty_state)
d[[age]] <- matrix(dfs_ages[[age]]$empty_state)
}
n_days = 365
for (day in 2:n_days) {
yday <- day - 1
for (age in ages) {
s_ <- s[[age]]
n_ <- n[[age]]
e_ <- e[[age]]
i_ <- i[[age]]
h_ <- h[[age]]
c_ <- c[[age]]
r_ <- r[[age]]
d_ <- d[[age]]
# Calculate new infections from each source age
new_by_age <- sapply(ages, function(src_age) {
dfs_ages[[src_age]]$pop_infection_rate * age_infection_rates[[src_age, age]] * (e[[src_age]][,yday] + i[[src_age]][,yday])
})
new_infections <- rowSums(new_by_age) * behaviour_mod[[day]] * s_[,yday]
s[[age]] <- cbind(s_, s_[,yday] - new_infections)
n[[age]] <- cbind(n_, 1 * new_infections)
e[[age]] <- cbind(e_, e_[,yday] + new_infections - e_[,yday] / exposed_time)
i[[age]] <- cbind(i_, i_[,yday] + e_[,yday] / exposed_time - i_[,yday] / infected_time)
h[[age]] <- cbind(h_, h_[,yday] + i_[,yday] * dfs_ages[[age]]$Hospitalization / infected_time - h_[,yday] / hosp_time)
c[[age]] <- cbind(c_, c_[,yday] + h_[,yday] * dfs_ages[[age]]$Crit_of_Hosp / hosp_time - c_[,yday] / crit_time)
r[[age]] <- cbind(r_, r_[,yday] +
i_[,yday] * (1 - dfs_ages[[age]]$Hospitalization) / infected_time +
h_[,yday] * (1 - dfs_ages[[age]]$Crit_of_Hosp) / hosp_time +
c_[,yday] * (1 - dfs_ages[[age]]$FR_of_Crit) / crit_time)
d[[age]] <- cbind(d_, d_[,yday] + c_[,yday] * dfs_ages[[age]]$FR_of_Crit / crit_time)
}
# Add one infected adult to all locations with this start day
e[[AGE_ADULT]][,day] <- e[[AGE_ADULT]][,day] + (dfs_ages[[AGE_ADULT]]$start_day == day)
}
df_loc_info <- dfs_ages[[age]][c('TA_Code','Lvl3','Lvl4')]
#df_loc_info
df_pandemic <- bind_rows(lapply(ages, function(age) {
rbind(
cbind(df_loc_info, Age=age_names[[age]], State='Susceptible', s[[age]]),
cbind(df_loc_info, Age=age_names[[age]], State='New Infections', n[[age]]),
cbind(df_loc_info, Age=age_names[[age]], State='Exposed', e[[age]]),
cbind(df_loc_info, Age=age_names[[age]], State='Infected', i[[age]]),
cbind(df_loc_info, Age=age_names[[age]], State='Hospitalized', h[[age]]),
cbind(df_loc_info, Age=age_names[[age]], State='Critical', c[[age]]),
cbind(df_loc_info, Age=age_names[[age]], State='Recovered', r[[age]]),
cbind(df_loc_info, Age=age_names[[age]], State='Dead', d[[age]])
)
}))
# write.csv(df_pandemic, '../out/pandemic-stepwise.csv')
df_ta <- df_pandemic %>% tidyr::pivot_longer(
!matches("[A-Za-z]"), names_to='Day', values_to='People',
names_transform=list(Day=as.integer))
df_district <- df_ta %>%
group_by(Lvl3,Day,State) %>%
summarise(People=sum(People))
df_country <- df_district %>%
group_by(Day,State) %>%
summarise(People=sum(People))
end_time <- Sys.time()
print(end_time - start_time)
options(scipen=999)
ggplot(data=df_country, aes(x=Day, y=People, group=State, color=State)) + geom_line()
##------------##
##--TA Level--##
##------------##
tas_names <- df_ta$Lvl4 %>% unique()
##--Compartiments of interest
state_table <- c("New Infections", "Hospitalized", "Critical", "Dead")
##--Inserting date--##
df_ta2 <- df_ta
df_ta2$date <- rep(seq(from = as.Date("2020-04-01"),
by = "day", length.out = 365), 10152)
##--Creating a list to store TAs information
list_TAs <- list()
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date == today())
ta_test <- ta_test[,-c(1,2)] %>%
filter(State %in% state_table)
##--Begin of loop
##i = 1
for(i in 1:length(tas_names)){
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(State) %>%
summarize(new_inf = sum(People)) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta_test2, key = State, value = new_inf) %>%
mutate(Cases = round(`New Infections` + Hospitalized + Critical),
Hosp = round(Hospitalized),
Critical = round(Critical),
Dead = trunc(Dead)) %>%
select(TA, Cases, Hosp, Critical, Dead)
list_TAs[[i]] <- ta1_spread
}
result_TAs <- do.call(rbind, list_TAs)
result_TAs
View(result_TAs)
runApp('~/Google Drive/Coronavirus/Malawi-covid_19/Dados_Att_e_Modelos/Malawi-COVID-Epidemiological-Model/Malawi-COVID-Epidemiological-Model-master/stepwise_dashboard.R')
##--Filtering for today
ta_test <- df_ta2 %>%
filter(date <= today())
View(ta_test)
ta_test <- ta_test[,-c(1,2)] %>%
filter(State %in% state_table)
View(ta_test)
##--Teste for first TA
i = 1
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date)
View(ta_test2)
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(date, State)
View(ta_test2)
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(date, State) %>%
summarize(new_inf = sum(People)) %>%
mutate(TA = tas_names[i])
View(ta_test2)
ta1_spread <- spread(ta_test2, key = State, value = new_inf)
View(ta1_spread)
names(ta1_spread)
ta1_spread <- spread(ta_test2, key = State, value = new_inf) %>%
mutate(Cases = `New Infections` + Hospitalized + Critical)
View(ta1_spread)
Cases_cum_ta = cumsum(ta1_spread$Cases) %>% round()
Cases_cum_ta
Cases_cum_ta = cumsum(ta1_spread$Cases) %>% round()
Hosp_cum_ta = cumsum(ta1_spread$Hospitalized) %>% round()
Critical_cum_ta = cumsum(ta1_spread$Critical) %>% round()
Critical_cum_ta
Hosp_cum_ta
Dead_ta =  ta1_spread$Dead %>% tail() %>% round()
Dead_ta
Dead_ta =  ta1_spread$Dead %>% tail(1) %>% round()
Dead_ta
length(Cases_cum_ta)
Dead_ta
ta1_spread$Dead
Dead_ta =  ta1_spread$Dead %>% round()
Dead_ta
todate_ta <- tibble(Cases = Cases_cum_ta,
Hosp = Hosp_cum_ta,
Critical = Critical_cum_ta,
Death = Dead_ta)
View(todate_ta)
todate_ta <- tibble(TA = tas_names[i],
Cases = Cases_cum_ta %>% tail(1),
Hosp = Hosp_cum_ta %>% tail(1),
Critical = Critical_cum_ta %>% tail(1),
Death = Dead_ta %>% tail(1))
todate_ta
##--Creating a list to store TAs information
list_TAs <- list()
##--To Date TA
##--Creating a list to store TAs information
list_TAs <- list()
##--To Date TA
##--Creating a list to store TAs information
list_TAs_simulation <- list()
##--To Date TA
##--Creating a list to store TAs information
list_TAs_simulation <- list()
##--To Date TA
##--Creating a list to store TAs information
list_TAs_simulation <- list()
for(i in 1:length(tas_names)){
ta_test2 <- ta_test %>%
filter(Lvl4 == tas_names[i]) %>%
select(Lvl4, State, People, date) %>%
group_by(date, State) %>%
summarize(new_inf = sum(People)) %>%
mutate(TA = tas_names[i])
ta1_spread <- spread(ta_test2, key = State, value = new_inf) %>%
mutate(Cases = `New Infections` + Hospitalized + Critical)
Cases_cum_ta = cumsum(ta1_spread$Cases) %>% round()
Hosp_cum_ta = cumsum(ta1_spread$Hospitalized) %>% round()
Critical_cum_ta = cumsum(ta1_spread$Critical) %>% round()
Dead_ta =  ta1_spread$Dead %>% round()
todate_ta <- tibble(TA = tas_names[i],
Cases = Cases_cum_ta %>% tail(1),
Hosp = Hosp_cum_ta %>% tail(1),
Critical = Critical_cum_ta %>% tail(1),
Death = Dead_ta %>% tail(1))
list_TAs_simulation[[i]] <- todate_ta
}
TAs_simulation <- do.call(rbind, list_TAs_simulation)
TAs_simulation
runApp('~/Google Drive/Coronavirus/Malawi-covid_19/Dados_Att_e_Modelos/Malawi-COVID-Epidemiological-Model/Malawi-COVID-Epidemiological-Model-master/stepwise_dashboard.R')
runApp('~/Google Drive/Coronavirus/Malawi-covid_19/Dados_Att_e_Modelos/Malawi-COVID-Epidemiological-Model/Malawi-COVID-Epidemiological-Model-master/stepwise_dashboard.R')
library(lubridate)
#setwd("~/Documents/GitHub/covid-19_Pernambuco")
hoje <- format(as.Date(today()), "%d-%m-%Y")
# Carregando a base de dados limpa
library(readr)
df <- read_delim(paste0("~/Google Drive/Coronavirus/IRRD/planilhas de pe/outubro/", hoje,
"/base/recife_att.csv"), ";", escape_double = TRUE, trim_ws = TRUE)
names(df)
dim(df)
#View(df)
# Aplicando a função para padronizar o nome das variáveis
library(janitor)
de <- janitor::clean_names(df)
names(de)
names(de)[1] <- "data"
#View(de)
path = paste0("/Users/edneideramalho/Google Drive/Coronavirus/IRRD/planilhas de pe/outubro/", hoje, "/")
write.csv(de, paste0(path, "covid-19_Pernambuco.csv"))
library(lubridate)
hoje <- format(as.Date(today()), "%d-%m-%Y")
# Carregando a base de dados limpa
library(readr)
df <- read_delim(paste0("~/Google Drive/Coronavirus/IRRD/planilhas de pe/outubro/", hoje,
"/base/recife_att.csv"), ";", escape_double = TRUE, trim_ws = TRUE)
library(lubridate)
#setwd("~/Documents/GitHub/covid-19_Pernambuco")
hoje <- format(as.Date(today()), "%d-%m-%Y")
# Carregando a base de dados limpa
library(readr)
df <- read_delim(paste0("~/Google Drive/Coronavirus/IRRD/planilhas de pe/outubro/", hoje,
"/base/recife_att.csv"), ";", escape_double = TRUE, trim_ws = TRUE)
names(df)
dim(df)
#View(df)
# Aplicando a função para padronizar o nome das variáveis
library(janitor)
de <- janitor::clean_names(df)
names(de)
names(de)[1] <- "data"
#View(de)
path = paste0("/Users/edneideramalho/Google Drive/Coronavirus/IRRD/planilhas de pe/outubro/", hoje, "/")
write.csv(de, paste0(path, "covid-19_Pernambuco.csv"))
